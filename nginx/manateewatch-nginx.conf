
# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name manateewatch.com;

    
    return 301 https://$host$request_uri;
    
}

# Define the server block for the default server.
server {
    listen 443 ssl;
    server_name manateewatch.com;
    server_tokens off;
    # Here we define the server location - default HTTP port 80. 
    # We assign no name to the server, so it will be the default server for all requests.
    # We turn off the server tokens to hide the version of the server.
    # We set the maximum body size to 20M. Any requests larger than 20MB will result in a 413 error (Request Entity Too Large).

    # Define SSL certificate and key paths
    ssl_certificate /etc/nginx/ssl/ssl_cert.pem;  
    ssl_certificate_key /etc/nginx/ssl/ssl_cert_key.key;  
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'HIGH:!aNULL:!MD5';
    ssl_prefer_server_ciphers on;

    # Additional security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;


    # Define the locations for each URL request.

    location / {
        proxy_pass http://frontend:3000; # This is the URL of the frontend service - referenced in the docker-compose file.
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

        location /api/v1/ {
        proxy_pass http://backend:8000; # This is the URL of the backend service - referenced in the docker-compose file.
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    # Add CORS-related headers
    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, PUT, DELETE';
    add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
    add_header Access-Control-Allow-Credentials true;

    # Handle preflight OPTIONS requests
    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, PUT, DELETE';
        add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
        add_header Access-Control-Allow-Credentials true;
        return 204;  # No content for OPTIONS request
    }
        
    }

    error_page   500 502 503 504  /50x.html;

    location = /50x.html {
    root   /usr/share/nginx/html;
    }


}